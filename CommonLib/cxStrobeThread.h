#pragma once

/*==============================================================================
Timer test thread.
==============================================================================*/

//******************************************************************************
//******************************************************************************
//******************************************************************************
#include "risThreadsTimerThread.h"
#include "risTimeMarker.h"

namespace CX
{
//******************************************************************************
//******************************************************************************
//******************************************************************************

class StrobeThread : public Ris::Threads::BaseTimerThread
{
public:
   typedef Ris::Threads::BaseTimerThread BaseClass;

   //******************************************************************************
   //******************************************************************************
   //******************************************************************************
   // Members.

   Ris::PeriodicTimeMarker mTimeMarker;

   bool mTPFlag;
   int  mTestCode;
   int  mTestCount;

   //******************************************************************************
   //******************************************************************************
   //******************************************************************************
   // Methods.

   // Constructor.
   StrobeThread();

   // Base class overloads.
   void threadInitFunction() override;
   void executeOnTimer(int aTimeCount) override;

   void executeTest1 (int aTimeCount);
   void executeTest2 (int aTimeCount);
};

//******************************************************************************
//******************************************************************************
//******************************************************************************
// Global instance

#ifdef _CXSTROBETHREAD_CPP_
          StrobeThread* gStrobeThread;
#else
   extern StrobeThread* gStrobeThread;
#endif

//******************************************************************************
//******************************************************************************
//******************************************************************************
}//namespace


